package calculation

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/IBM/sarama"
	"github.com/IbadT/business_bank_back/services/matematika/internal/kafka"
)

// ============================================================================
// –ò–ù–¢–ï–†–§–ï–ô–° –°–ï–†–í–ò–°–ê
// ============================================================================

// CalculationService - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–ø–∏—Å–∫–∞–º–∏
type CalculationService interface {
	// GenerateStatement –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –≤—ã–ø–∏—Å–∫—É –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Kafka
	GenerateStatement(ctx context.Context, req *GenerateStatementRequest) (*GenerateStatementResponse, error)

	// GetStatementStatusByID –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–∏—Å–∫–∏ –ø–æ ID
	GetStatementStatusByID(ctx context.Context, id string) (interface{}, error)

	// GetStatementResultByID –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ ID
	GetStatementResultByID(ctx context.Context, id string) (interface{}, error)

	// StartConsumer –∑–∞–ø—É—Å–∫–∞–µ—Ç Kafka consumer –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	StartConsumer(ctx context.Context) error
}

// ============================================================================
// –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–ê
// ============================================================================

// calculationService - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è CalculationService
// –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
// - calcRepo: –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (Repository pattern)
// - kafkaProducer: –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –≤ Kafka (Event-driven architecture)
type calculationService struct {
	calcRepo      CalculationRepository // Repository –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
	kafkaProducer kafka.Producer        // Kafka producer –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
}

// NewCalculationService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ë–ï–ó Kafka (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ NewCalculationServiceWithKafka –¥–ª—è production
func NewCalculationService(calcRepo CalculationRepository, kafkaProducer kafka.Producer) CalculationService {
	return &calculationService{
		calcRepo:      calcRepo,
		kafkaProducer: kafkaProducer,
	}
}

// NewCalculationServiceWithKafka —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –° Kafka producer
// –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è production
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - calcRepo: Repository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
//   - kafkaProducer: Producer –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –≤ Kafka
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å
func NewCalculationServiceWithKafka(calcRepo CalculationRepository, kafkaProducer kafka.Producer) CalculationService {
	return &calculationService{
		calcRepo:      calcRepo,
		kafkaProducer: kafkaProducer, // –í–Ω–µ–¥—Ä—è–µ–º Kafka —á–µ—Ä–µ–∑ Dependency Injection
	}
}

// ============================================================================
// –ú–ï–¢–û–î–´ –°–ï–†–í–ò–°–ê
// ============================================================================

// GenerateStatement –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≤—ã–ø–∏—Å–∫—É
// –ü–û–õ–ù–´–ô WORKFLOW –° KAFKA:
//  1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//  2. –°–æ–∑–¥–∞–Ω–∏–µ Statement ID
//  3. –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
//  4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Kafka
//  5. –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
func (s *calculationService) GenerateStatement(ctx context.Context, req *GenerateStatementRequest) (*GenerateStatementResponse, error) {
	// –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤—ã–ø–∏—Å–∫–∏
	statementID := "stmt_" + req.Month + "_" + req.AccountID

	log.Println("========================================")
	log.Printf("üì• –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—ã–ø–∏—Å–∫–∏")
	log.Printf("   AccountID: %s", req.AccountID)
	log.Printf("   Month: %s", req.Month)
	log.Printf("   BusinessType: %s", req.BusinessType)
	log.Printf("   InitialBalance: %.2f", req.InitialBalance)
	log.Printf("   StatementID: %s", statementID)
	log.Println("========================================")

	// –®–ê–ì 2: –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç —Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)
	log.Println("‚öôÔ∏è  –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã...")
	time.Sleep(500 * time.Millisecond) // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
	calculationData := map[string]interface{}{
		"statementId":    statementID,
		"accountId":      req.AccountID,
		"month":          req.Month,
		"initialBalance": req.InitialBalance,
		"finalBalance":   req.InitialBalance + 5000.00, // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
		"totalRevenue":   10000.00,
		"totalExpenses":  -5000.00,
		"netProfit":      5000.00,
		"transactions":   []string{"transaction1", "transaction2"}, // –ó–∞–≥–ª—É—à–∫–∞
	}

	log.Println("‚úì –†–∞—Å—á–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

	// –®–ê–ì 3: –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Kafka
	if s.kafkaProducer != nil {
		log.Println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Kafka...")

		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Kafka
		kafkaMsg := &kafka.CalculationCompletedMessage{
			StatementID:   statementID,
			AccountID:     req.AccountID,
			Month:         req.Month,
			Status:        kafka.StatusCompleted,
			Data:          calculationData,
			CorrelationID: statementID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º statementID –∫–∞–∫ correlation ID
			Timestamp:     time.Now(),
		}

		// –ü—É–±–ª–∏–∫—É–µ–º –≤ Kafka
		if err := s.kafkaProducer.PublishCalculationCompleted(ctx, kafkaMsg); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Kafka: %v", err)
			return nil, fmt.Errorf("failed to publish to Kafka: %w", err)
		}

		log.Println("‚úì –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka!")
		log.Printf("   Topic: %s", kafka.TopicCalculationCompleted)
		log.Printf("   StatementID: %s", statementID)
	} else {
		log.Println("‚ö†Ô∏è  Kafka producer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Kafka)")
	}

	// –®–ê–ì 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
	return &GenerateStatementResponse{
		StatementID: statementID,
		Status:      "processing",
		Message:     "Statement generation started and sent to Kafka",
	}, nil
}

// StartConsumer –∑–∞–ø—É—Å–∫–∞–µ—Ç Kafka consumer –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
// –î–ï–ú–û –ú–ï–¢–û–î: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka
func (s *calculationService) StartConsumer(ctx context.Context) error {
	log.Println("========================================")
	log.Println("üéß –ó–ê–ü–£–°–ö KAFKA CONSUMER")
	log.Println("========================================")

	// –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–∫–µ—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–µ –∂–µ —á—Ç–æ –∏ –¥–ª—è Producer)
	kafkaBrokers := strings.Split(os.Getenv("KAFKA_BROKERS"), ",")
	if len(kafkaBrokers) == 0 || kafkaBrokers[0] == "" {
		kafkaBrokers = []string{"kafka1:9092", "kafka2:9093"} // Fallback –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä
	}

	log.Printf("üì° Connecting to Kafka brokers: %v", kafkaBrokers)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é consumer
	consumerConfig := kafka.DefaultConsumerConfig(
		kafkaBrokers,                              // Kafka –±—Ä–æ–∫–µ—Ä—ã –∏–∑ env (–∫–ª–∞—Å—Ç–µ—Ä)
		kafka.ConsumerGroupMatematikaService,      // Consumer group ID
		[]string{kafka.TopicCalculationCompleted}, // –¢–æ–ø–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
	)

	// –°–æ–∑–¥–∞–µ–º consumer (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç *KafkaConsumer, –∞ –Ω–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
	kafkaConsumer, err := kafka.NewConsumer(consumerConfig, log.Default())
	if err != nil {
		return fmt.Errorf("failed to create consumer: %w", err)
	}

	// –ü—Ä–∏–≤–æ–¥–∏–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ RegisterHandler
	concreteConsumer, ok := kafkaConsumer.(*kafka.KafkaConsumer)
	if !ok {
		return fmt.Errorf("unexpected consumer type")
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handler –¥–ª—è —Ç–æ–ø–∏–∫–∞
	concreteConsumer.RegisterHandler(kafka.TopicCalculationCompleted, func(ctx context.Context, message *sarama.ConsumerMessage) error {
		log.Println("========================================")
		log.Println("üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –ò–ó KAFKA")
		log.Printf("   Topic: %s", message.Topic)
		log.Printf("   Partition: %d", message.Partition)
		log.Printf("   Offset: %d", message.Offset)
		log.Printf("   Key: %s", string(message.Key))
		log.Println("----------------------------------------")
		log.Printf("   Message: %s", string(message.Value))
		log.Println("========================================")

		// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		var msg kafka.CalculationCompletedMessage
		if err := kafka.UnmarshalMessage(message, &msg); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
			return err
		}

		log.Println("üìä –†–ê–°–ü–ê–†–°–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
		log.Printf("   StatementID: %s", msg.StatementID)
		log.Printf("   AccountID: %s", msg.AccountID)
		log.Printf("   Month: %s", msg.Month)
		log.Printf("   Status: %s", msg.Status)
		log.Printf("   CorrelationID: %s", msg.CorrelationID)
		log.Println("========================================")

		return nil // –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º consumer
	if err := concreteConsumer.Start(ctx); err != nil {
		return fmt.Errorf("failed to start consumer: %w", err)
	}

	log.Println("‚úì Kafka consumer –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
	return nil
}

// GetStatementStatusByID –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–∏—Å–∫–∏
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
//   - id: UUID –≤—ã–ø–∏—Å–∫–∏
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç error –µ—Å–ª–∏ –≤—ã–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
func (s *calculationService) GetStatementStatusByID(ctx context.Context, id string) (interface{}, error) {
	// TODO: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î
	return map[string]string{
		"statementId": id,
		"status":      "completed",
	}, nil
}

// GetStatementResultByID –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
//   - id: UUID –≤—ã–ø–∏—Å–∫–∏
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç error –µ—Å–ª–∏ –≤—ã–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞
func (s *calculationService) GetStatementResultByID(ctx context.Context, id string) (interface{}, error) {
	// TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î
	return map[string]string{
		"statementId": id,
		"result":      "calculation data here",
	}, nil
}
