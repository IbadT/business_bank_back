# ============================================================================
# API ROUTES CONFIGURATION
# ============================================================================
# Этот файл определяет все API endpoints и их маршрутизацию на backend сервисы
# Каждый location блок соответствует определенному URL паттерну
# Nginx матчит входящий запрос с location'ами сверху вниз (первое совпадение)

# ----------------------------------------------------------------------------
# MATEMATIKA SERVICE - Расчеты и генерация выписок
# ----------------------------------------------------------------------------
# Все endpoints для Matematika Service начинаются с /api/matematika/
# Это обеспечивает namespace изоляцию и легкую идентификацию сервиса

# Health check endpoint - проверка здоровья Matematika сервиса
# URL: GET /api/matematika/health
location /api/matematika/health {
    # proxy_pass - направляет запрос на upstream backend
    # http://matematika_backend - имя upstream блока из nginx.conf
    # /health - путь на backend сервисе (matematika:8080/health)
    # Nginx автоматически заменит /api/matematika/health на /health при проксировании
    proxy_pass http://matematika_backend/health;
    
    # include - подключаем общие proxy параметры из отдельного файла
    # /etc/nginx/conf.d/proxy-params.conf содержит стандартные headers и timeout'ы
    # Переиспользование конфигурации - DRY принцип (Don't Repeat Yourself)
    include /etc/nginx/conf.d/proxy-params.conf;
}

# Генерация выписки - тяжелая операция с rate limiting
# URL: POST /api/matematika/generate-statement
# Body: {"accountId": "...", "month": "...", "businessType": "...", "initialBalance": ...}
location /api/matematika/generate-statement {
    # limit_req - применяем rate limiting из зоны statement_limit
    # zone=statement_limit - используем зону с лимитом 10 req/min (из nginx.conf)
    # burst=5 - разрешаем "всплеск" до 5 дополнительных запросов сверх лимита
    #   Пример: если лимит 10/min, можно сделать 15 запросов, но только разово
    #   Burst позволяет обработать кратковременные пики нагрузки
    # nodelay - обрабатываем burst запросы немедленно (без задержки)
    #   Без nodelay burst запросы выполняются с задержкой (throttling)
    #   С nodelay - все 5 burst запросов обработаются сразу
    limit_req zone=statement_limit burst=5 nodelay;
    
    # Проксируем на matematika backend
    # http://matematika_backend - upstream из nginx.conf (matematika:8080)
    # /generate-statement - endpoint на backend сервисе
    # URL transform: /api/matematika/generate-statement → matematika:8080/generate-statement
    proxy_pass http://matematika_backend/generate-statement;
    
    # --------------------------------------------------------------------
    # Специальные proxy настройки для долгих операций
    # НЕ используем include proxy-params.conf чтобы переопределить timeout'ы
    # --------------------------------------------------------------------
    
    # proxy_set_header Host - передаем оригинальный Host header
    # $host - имя хоста из клиентского запроса (localhost, api.example.com)
    # Backend сервис видит тот же Host что отправил клиент
    proxy_set_header Host $host;
    
    # proxy_set_header X-Real-IP - передаем реальный IP клиента
    # $remote_addr - IP адрес подключившегося клиента
    # Backend нужен для логирования, rate limiting, геолокации
    # Без этого backend видел бы IP Nginx'а, а не клиента
    proxy_set_header X-Real-IP $remote_addr;
    
    # proxy_set_header X-Forwarded-For - цепочка proxy серверов
    # $proxy_add_x_forwarded_for - добавляет текущий $remote_addr к существующему списку
    # Пример: "client_ip, proxy1_ip, proxy2_ip" если несколько proxy
    # Полезно когда за Nginx еще CDN или другой балансировщик
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    
    # proxy_set_header X-Forwarded-Proto - оригинальный протокол (http/https)
    # $scheme - протокол текущего запроса (http или https)
    # Backend знает использовал ли клиент HTTPS (важно для редиректов, cookies)
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # proxy_http_version - версия HTTP для upstream соединения
    # 1.1 - поддерживает keepalive соединения к backend
    # HTTP/1.0 не поддерживает keepalive - каждый запрос новое TCP соединение
    proxy_http_version 1.1;
    
    # proxy_set_header Connection - переопределяем Connection header
    # "" (пустая строка) - убираем "Connection: close"
    # Необходимо для работы keepalive соединений к backend
    # Без этого каждый запрос создавал бы новое TCP соединение (медленно)
    proxy_set_header Connection "";
    
    # УВЕЛИЧЕННЫЕ TIMEOUT'Ы - генерация выписки может занимать время
    
    # proxy_connect_timeout - максимальное время для установки соединения с backend
    # 10s - достаточно даже для медленной сети
    # Если за 10 секунд не подключились к backend -> 504 Gateway Timeout
    proxy_connect_timeout 10s;
    
    # proxy_send_timeout - timeout для отправки request к backend
    # 120s (2 минуты) - время передачи тела запроса на backend
    # Актуально для больших POST запросов (файлы, большие JSON)
    proxy_send_timeout 120s;
    
    # proxy_read_timeout - timeout для чтения response от backend
    # 120s (2 минуты) - backend должен ответить за это время
    # Генерация выписки может занимать время (расчеты, Kafka, DB)
    # Стандартный timeout 60s может быть недостаточен
    # Если backend не ответил за 120s -> 504 Gateway Timeout
    proxy_read_timeout 120s;
}

# Статус выписки - получение статуса обработки
# URL: GET /api/matematika/statement/{id}/status
# Пример: GET /api/matematika/statement/stmt_2025-01_ACC123/status
location ~ /api/matematika/statement/(.+)/status {
    # location ~ - регулярное выражение для матчинга URL
    # (.+) - захватываем ID выписки (любые символы)
    # $1 - первая захваченная группа из regex (ID выписки)
    # Пример: /api/matematika/statement/ABC123/status
    #   → (.+) захватит "ABC123"
    #   → $1 = "ABC123"
    #   → backend получит /statement/ABC123/status
    
    # proxy_pass с переменной $1 из regex
    # http://matematika_backend/statement/$1/status
    # Nginx автоматически подставит захваченное значение
    proxy_pass http://matematika_backend/statement/$1/status;
    
    # Используем стандартные proxy параметры (headers, timeout'ы)
    # include подключает все настройки из proxy-params.conf
    include /etc/nginx/conf.d/proxy-params.conf;
}

# Результаты выписки - получение готовых расчетов
# URL: GET /api/matematika/statement/{id}/result
# Пример: GET /api/matematika/statement/stmt_2025-01_ACC123/result
location ~ /api/matematika/statement/(.+)/result {
    # Аналогично предыдущему location с regex
    # ~ - включает regex matching
    # (.+) - захватываем ID выписки
    # $1 - подставляем ID в proxy_pass
    proxy_pass http://matematika_backend/statement/$1/result;
    
    # Стандартные proxy настройки
    include /etc/nginx/conf.d/proxy-params.conf;
}

# Все остальные matematika endpoints (catch-all)
# URL: GET/POST/PUT/DELETE /api/matematika/*
# Этот location матчится для всех путей начинающихся с /api/matematika/
# НЕ матчится: /api/matematika/health, /api/matematika/generate-statement
#   (они уже обработаны location'ами выше - Nginx идет сверху вниз)
# МАТЧИТСЯ: /api/matematika/reports, /api/matematika/users, etc.
location /api/matematika/ {
    # limit_req - общий лимит для API (100 req/min)
    # zone=api_limit - используем общую зону (из nginx.conf)
    # burst=20 - разрешаем всплеск до 20 дополнительных запросов
    #   Более мягкий лимит чем для генерации (burst=5)
    #   Эти endpoints легче (read операции)
    # nodelay - обрабатываем burst сразу без задержки
    limit_req zone=api_limit burst=20 nodelay;
    
    # proxy_pass с trailing slash (/)
    # http://matematika_backend/ - ВАЖНО: слеш в конце!
    # Слеш означает: убрать /api/matematika/ из URI перед проксированием
    # Пример: /api/matematika/reports/123 → matematika:8080/reports/123
    # Без слеша: /api/matematika/reports/123 → matematika:8080/api/matematika/reports/123 (НЕПРАВИЛЬНО)
    proxy_pass http://matematika_backend/;
    
    # Стандартные proxy параметры
    include /etc/nginx/conf.d/proxy-params.conf;
}

# ----------------------------------------------------------------------------
# MASKA SERVICE - Форматирование выписок (раскомментируй когда добавишь)
# ----------------------------------------------------------------------------

# # Health check
# location /api/maska/health {
#     proxy_pass http://maska_backend/health;
#     include /etc/nginx/conf.d/proxy-params.conf;
# }

# # Maska endpoints
# location /api/maska/ {
#     limit_req zone=api_limit burst=20 nodelay;
#     
#     proxy_pass http://maska_backend/;
#     include /etc/nginx/conf.d/proxy-params.conf;
# }

# ----------------------------------------------------------------------------
# SHARED SERVICE - Общие данные (раскомментируй когда добавишь)
# ----------------------------------------------------------------------------

# # Health check
# location /api/shared/health {
#     proxy_pass http://shared_backend/health;
#     include /etc/nginx/conf.d/proxy-params.conf;
# }

# # Shared endpoints
# location /api/shared/ {
#     limit_req zone=api_limit burst=20 nodelay;
#     
#     proxy_pass http://shared_backend/;
#     include /etc/nginx/conf.d/proxy-params.conf;
# }

# ----------------------------------------------------------------------------
# MONITORING & ADMIN ENDPOINTS - UI инструменты для мониторинга
# ----------------------------------------------------------------------------
# Эти endpoints предоставляют веб-интерфейсы для управления и мониторинга

# Kafdrop UI - веб-интерфейс для мониторинга Kafka
# URL: http://localhost/kafdrop/
location /kafdrop/ {
    # proxy_pass на Kafdrop контейнер
    # kafdrop:9000 - Docker контейнер и внутренний порт
    # / в конце - убираем /kafdrop/ из URI при проксировании
    # Пример: /kafdrop/topic/test → kafdrop:9000/topic/test
    # Kafdrop ожидает запросы на root path (/), а не на /kafdrop/
    proxy_pass http://kafdrop:9000/;
    
    # Стандартные proxy параметры
    include /etc/nginx/conf.d/proxy-params.conf;
}

# pgAdmin - веб-интерфейс для управления PostgreSQL
# URL: http://localhost/pgadmin/
location /pgadmin/ {
    # proxy_pass на pgAdmin контейнер
    # pgAdmin:80 - имя контейнера и порт (pgAdmin слушает 80 внутри контейнера)
    # / в конце - убираем /pgadmin/ из URI
    proxy_pass http://pgAdmin:80/;
    
    # Стандартные proxy параметры
    include /etc/nginx/conf.d/proxy-params.conf;
    
    # pgAdmin специфичный заголовок
    # X-Script-Name - сообщает pgAdmin что он находится в sub-path
    # /pgadmin - pgAdmin будет генерировать правильные URLs с этим префиксом
    # Без этого все ссылки внутри pgAdmin были бы сломаны
    proxy_set_header X-Script-Name /pgadmin;
}

# ----------------------------------------------------------------------------
# DEFAULT & ERROR PAGES - Информационные endpoints
# ----------------------------------------------------------------------------

# Root endpoint - информация об API Gateway
# URL: GET /
# Возвращает JSON с описанием доступных сервисов
location = / {
    # location = - exact match (только "/" без других символов)
    # Приоритет выше чем обычные location'ы
    
    # default_type - переопределяем MIME тип для этого location
    # application/json - ответ будет JSON (для API клиентов)
    default_type application/json;
    
    # return 200 - возвращаем статус 200 OK с JSON телом
    # Статичный JSON без обращения к backend (быстро)
    # Содержит карту всех доступных сервисов и endpoints
    # Полезно для discovery - клиент узнает какие API доступны
    return 200 '{"service":"business-bank-api-gateway","version":"1.0.0","status":"healthy","endpoints":{"/api/matematika":"Calculation Service","/api/maska":"Formatting Service","/api/shared":"Shared Data Service","/kafdrop":"Kafka UI","/pgadmin":"Database UI"}}';
}

# API документация endpoint (placeholder)
# URL: GET /api/docs
# Можешь позже добавить Swagger UI или OpenAPI спецификацию
location /api/docs {
    # Возвращаем JSON с информацией о документации
    # Статичный ответ без backend
    default_type application/json;
    
    # return 200 с JSON указывающим где найти документацию
    # swagger и openapi - стандартные пути для API docs
    # TODO: добавь реальные ссылки когда настроишь Swagger
    return 200 '{"message":"API Documentation coming soon","swagger":"/api/docs/swagger","openapi":"/api/docs/openapi"}';
}

# 404 для неизвестных API endpoints (catch-all для /api/*)
# URL: GET/POST /api/{anything-not-matched-above}
# Этот location самый последний для namespace /api/
# Срабатывает только если НИ ОДИН location выше не совпал
location /api/ {
    # default_type application/json - ошибка тоже в JSON формате
    # Консистентность API - все ответы в JSON (не HTML error page)
    default_type application/json;
    
    # return 404 - Not Found с пояснительным JSON
    # Клиент понимает что endpoint не существует
    # message указывает где посмотреть список доступных endpoints
    return 404 '{"error":"API endpoint not found","message":"Check /api/docs for available endpoints"}';
}

